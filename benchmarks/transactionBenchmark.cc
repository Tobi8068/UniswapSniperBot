#include <benchmark/benchmark.h>

#include <transaction.hpp>
#include <utils.hpp>

static void keccak256(benchmark::State &state) {
  Utils::Byte input[] = { 0xef, 0x01, 0x80, 0x84, 0x10, 0x10, 0x00, 0x00, 0x94, 0xf0, 0x10, 0x9f, 0xc8, 0xdf, 0x28, 0x30, 0x27, 0xb6, 0x28, 0x5c, 0xc8, 0x89, 0xf5, 0xaa, 0x62, 0x4e, 0xac, 0x1f, 0x55, 0x80, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xbc, 0x01, 0x80, 0x80 };
  Utils::Byte output[32];

  for(auto _ : state) {
    benchmark::DoNotOptimize(Transaction::keccak256(input, 48, output));
  }
}

static void ecdsa(benchmark::State &state) {
  Utils::Byte hash[] = { 0x12, 0x4e, 0x6c, 0x7e, 0xea, 0xfa, 0x39, 0xdd, 0x9c, 0x2a, 0x82, 0xdf, 0x94, 0x57, 0xdd, 0xe7, 0xd8, 0xee, 0xa5, 0x1f, 0x72, 0x17, 0x60, 0xf5, 0xac, 0x41, 0x2e, 0xab, 0x0f, 0x73, 0xdc, 0xf4 };
  Utils::Byte privateKey[] = { 0x4c, 0x08, 0x83, 0xa6, 0x91, 0x02, 0x93, 0x7d, 0x62, 0x31, 0x47, 0x1b, 0x5d, 0xbb, 0x62, 0x04, 0xfe, 0x51, 0x29, 0x61, 0x70, 0x82, 0x79, 0x2a, 0xe4, 0x68, 0xd0, 0x1a, 0x3f, 0x36, 0x23, 0x18 };
  Utils::Byte signature[64];
  int recid;

  for(auto _ : state) {
    benchmark::DoNotOptimize(Transaction::ecdsa(hash, privateKey, signature, &recid));
  }
}

BENCHMARK(keccak256)->Name("Transaction::keccak256");
BENCHMARK(ecdsa)->Name("Transaction::ecdsa");